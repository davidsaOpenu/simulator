- block:
  - name: build qemu
    include: build_qemu.yml

# Newer version of SeaBIOS is required to allow booting directly with a Linux kernel image.
- name: overwrite bios.bin
  copy:
  args:
    src: bios.bin
    dest: "{{ dest }}/eVSSIM/QEMU/pc-bios/bios.bin"

- name: copy kernel to simulator directory
  copy:
  args:
    src: "{{kernel_image}}"
    dest: "{{ dest }}/{{kernel_image}}"

- name: copy initrd to simulator directory
  copy:
  args:
    src: "{{initrd_image}}"
    dest: "{{ dest }}/{{initrd_image}}"


# Now let's copy everything to the image
#- name: copy kernel and initrd images
#$  become: yes
#  shell: >
#    virt-copy-in "{{ workspace }}/3.16.2/linux-3.16.2/arch/x86/boot/bzImage" "/boot/{{kernel_image}}" -a "{{hda_img}}";
#    virt-copy-in "{{ workspace }}/3.16.2/linux-3.16.2/initrd.img-3.16.2-guest" "/boot/{{initrd_image}}" -a "{{hda_img}}";


- name: ensure unique directory exists
  file:
  args:
    path: "{{ tmpfs_mountpoint }}/{{ test_instance_id }}"
    state: directory
  tags: qemu

- name: ensure hw/data symlink points to unique directory
  file:
  args:
    name: "{{ dest }}/eVSSIM/QEMU/hw/data"
    src: "{{ tmpfs_mountpoint }}/{{ test_instance_id }}"
    state: link
    force: yes
  tags: qemu

- name: create ssd.conf
  template:
    src: "ssd.conf"
    dest: "{{ dest }}/eVSSIM/QEMU/hw/data/ssd.conf"
  tags: qemu

- name: start guest in safe mode
  shell: "../x86_64-softmmu/qemu-system-x86_64 -m {{memory}} -smp {{smp}} -hda '{{hda_img}}' -device nvme -redir tcp:{{guest_ssh_port}}::22 -nographic -vnc :0  -daemonize -pidfile '{{qemu_pid_file}}' -machine {{qemu_machine}} -kernel '{{dest}}/{{kernel_image}}' -initrd '{{dest}}/{{initrd_image}}' -append '{{kernel_cmdline}}'"
  args:
    chdir: "{{ dest }}/eVSSIM/QEMU/hw"
  become: yes
  tags: qemu

- name: chmod 777 qemu_pid_file
  shell: "chmod 777 '{{qemu_pid_file}}'"
  become: yes

- include: qemu_wait_while_starting.yml

- debug:
  args:
    msg: "Output of 'ssh uname' to guest: {{ guest_uname.stdout }}"
  tags: qemu


- name: cleanup - remove evrything from the esd user homedir
  shell: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 'echo esd | sudo -S rm -rf ~/*'

# TODO: revist those steps again since we want to have once sources dir on the host and guest
#       BUT, mounting 3.16.2 dir on the host from the guest via nfs and the kernel compilation was very slow
#       as well as creating a 9pvirtio device exposing the mount_tag hostshare (http://www.linux-kvm.org/page/9p_virtio)
- name:  archive 3.2.16, nvme-cli, nvmeCompl projects
  shell: tar cvf projects.tar 3.16.2 nvme-cli nvmeCompl
  args:
    chdir: "{{ dest }}/.."

- name:  Transfer  projects.tar from local_host to guest_host
  shell: sshpass -p esd scp -o "StrictHostKeyChecking=no" -P 2222 projects.tar esd@127.0.0.1:~/
  args:
    chdir: "{{ dest }}/.."

- name: after transfering projects.tar
  pause: prompt='Press return to continue. Press Ctrl+c and then "a" to abort'
  when: debug_guest_tester_pre == True

- name: extract files from the tar on guest_host
  shell: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 'cd /home/esd/ && tar xvf projects.tar'

- name: after extracting projects.tar
  pause: prompt='Press return to continue. Press Ctrl+c and then "a" to abort'
  when: debug_guest_tester_pre == True



# TODO: move the compilation to separate role. Currently it is called twice (for sector and object startegies). No reason for that.
# TODO: record the compilation/installation steps. If error or warning is encoutered -> fail the task
- name: compile kernel and modules
  command: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 "{{ item }}"
  with_items:
    - 'cd /home/esd/3.16.2/linux-3.16.2 && make -j 4'
    - 'cd /home/esd/3.16.2/linux-3.16.2 && make modules -j 4'
    - 'cd /home/esd/3.16.2/linux-3.16.2 && echo esd | sudo -S make modules_install'
    - 'cd /home/esd/3.16.2/linux-3.16.2 && echo esd | sudo -S make install'

- name: after compilation
  pause: prompt='Press return to continue. Press Ctrl+c and then "a" to abort'
  when: debug_guest_tester_pre == True


- name: copy initrd.img-3.16.2 from the vm to the host
  shell: sshpass -p esd scp -o "StrictHostKeyChecking=no" -P 2222  esd@127.0.0.1:/boot/initrd.img-3.16.2 .
  args:
    chdir: "{{ dest }}/"

- name: copy vmlinuz-3.16.2 from the vm to the host
  shell: sshpass -p esd scp -o "StrictHostKeyChecking=no" -P 2222  esd@127.0.0.1:/boot/vmlinuz-3.16.2 .
  args:
    chdir: "{{ dest }}/"

- name: trancate dmesg buffer ring
  command: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 "{{ item }}"
  with_items:
    - 'echo esd | sudo -S dmesg -C'

- name: prepare for reboot several times
  set_fact:
    boot_loop_list: "{{ boot_loop_list | default([]) + [item | int] }}"
  with_sequence: start=1 end={{test_reboot_repeats}}

- include_tasks: qemu_reboot.yml
  loop: "{{boot_loop_list}}"
  loop_control:
    loop_var: "loop_item"

- name:  archive guest tests
  shell: tar cvf guest.tar guest
  args:
    chdir: "{{ dest }}/eVSSIM/tests/"

# TODO: change to be generic - transfering from local host to guest node
#       is essential since the local host copy contains ref changes
- name:  Transfer guest tests from local_host to guest_host
  shell: sshpass -p esd scp -o "StrictHostKeyChecking=no" -P 2222 guest.tar esd@127.0.0.1:~/
  args:
    chdir: "{{ dest }}/eVSSIM/tests/"

- name: extract files from the guest.tar on guest_host
  shell: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 'cd /home/esd/ && tar xvf guest.tar'

# shell instead of command (prevents failure on server. NP locally)
- name: compile dnvme against the built kernel
  shell: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 "{{ item }}"
  with_items:
    - 'cd /home/esd/nvmeCompl/dnvme && make clean'
    - 'cd /home/esd/nvmeCompl/dnvme && make && ls -all dnvme.ko'

- name: compile tnvme
  command: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 esd@127.0.0.1 "{{ item }}"
  with_items:
    - 'cd /home/esd/nvmeCompl/tnvme && make clean'
    - 'cd /home/esd/nvmeCompl/tnvme && make && ls -all tnvme'

- name: halt kernel - done preparing guest image
  command: sshpass -p esd ssh -o "StrictHostKeyChecking=no" -p 2222 root@127.0.0.1 "{{ item }}"
  with_items:
    - 'free && sync && echo 3 > /proc/sys/vm/drop_caches && free'
    - 'shutdown -P now'

- include: qemu_wait_while_stopping.yml

- debug: msg="Done starting and preparing guest image"
  tags: qemu
