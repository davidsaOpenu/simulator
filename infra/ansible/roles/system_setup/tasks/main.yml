# TODO remove dependancy on apt module. System prep must be system agnostic.
- name: install required packages
  apt:
  args:
      pkg: "{{ item }}"
      state: installed
  become: true
  with_items:
      - vim
      - git
      - "{{ gcc }}"
      # to build gtest
      - cmake
      - g++
      - unzip
      # to build osc-osd
      - libsqlite3-dev
      # to build qemu with XEN acceleration support
      - libxen-dev
      - zlib1g-dev
      - libsdl-image1.2-dev
      - libgnutls-dev
      - libvncserver-dev
      - libpci-dev
      - libaio-dev
      - sshpass
      # to edit cow2 images
      - libguestfs-tools
      # to compile nvme compl tests
      - libboost-all-dev
      - libxml++2.6-dev
      # to check if the host supports virtualization
      - libvirt-bin
      - libssl-dev
      # to use docker_container with ansible
      - python
      - python-pip

# tasks for docker-ce

- name: Remove previous docker installation
  apt:
    name: "{{ item.package }}"
    state: absent
  with_items: "{{ docker_cleanup_packages_Ubuntu }}"

- name: Install prerequisite packages
  apt:
    name: "{{ item.package }}"
    state: present
  with_items: "{{ docker_prerequisite_packages_Ubuntu }}"

- name: Install prerequisite packages (for Ubuntu 14.04 only)
  apt:
    name: "{{ item.package }}"
    state: present
  with_items: "{{ docker_prerequisite_packages_Ubuntu_1404 }}"
  when: ansible_distribution_version == '14.04'

- name: Import Docker CE repository gpg key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

- name: Add Docker CE repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install Docker CE
  apt:
    name: docker-ce
    state: present
    update_cache: yes

# tasks for installing python docker
- name: Install Docker SDK for python
  pip:
    name: docker

- name: ensure tmpfs dir exists
  become: true
  file:
  args:
    path: "{{tmpfs_mountpoint}}"
    state: directory

- name: mount tmpfs
  become: true
  mount:
  args:
    fstype: tmpfs
    opts: "size=16g"
    state: mounted
    src: tmpfs
    name: "{{tmpfs_mountpoint}}"
